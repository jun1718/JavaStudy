21.09.05_9회차 
======================================================================================================
*고객관리프로그램, 실행프로그램만들기, 클래스배경
======================================================================================================













######################################################################################################
예제14)고객관리프로그램(다음 강의를 통해 완성될 예제_정보수정, 정보삭제 기능이 없음)



#요구사항정의
-고객의 정보는 이름,성별,이메일,출생년도가 있습니다. 고객의 정보를 입력받아 배열에 저장해야합니다. 이름은 문자열로 저장하며, 
 성별은 남자는 M, 여자는 F로 저장합니다. 이메일은 문자열로 저장하며 태어난 출생년도는 정수로 저장합니다.
-고객관리프로그램은 고객의 정보를 저장, 조회, 수정, 삭제할 수 있는 기능이 있어야 합니다. 고객 정보를 파일에 저장하는 기능을 구현하지 않아도 
 됩니다.
-I를 눌러 고객의 정보를 입력받도록 하며, 저장된 고객정보는 P또는 N을 눌러 이전 고객정보 또는 다음 고객정보를 조회할수 있어야합니다.
 조회한 고객정보는 U를 눌러 새로운 정보로 수정할수 있어야합니다. D를 누르면 조회한 고객 정보를 배열에서 삭제해야 합니다. 프로그램의 
 종료는 Q를 누릅니다.

//각 함수에대한 조건은 모두 switch에 넣어라(함수에 탈출조건넣지마라는소리임)
insertData(index);
printData(index);
updateData(index);	//풀이에서는 함수에넣긴했는데 풀때는 그렇게풀지마라 정해진건아니고 통일하자는 차원에서.. 
deleteData(index);


######################################################################################################




답:








import java.util.Arrays;
import java.util.Scanner;

public class _1CustomerManager {
	//프로그램 전체에서 사용할 변수들은 클래스블록 바로 아래에 선언합니다.
	//static이 붙은 블록에서는 static변수와 static 메서드만 사용할수 있음
	
//globalVariable
	static String[] nameList = new String[100];
	static char[] genderList = new char[100];
	static String[] emailList = new String[100];
	static int[] birthList = new int[100];
	
	//현재 고객데이터가 몇명 저장되었는지 알기위한 변수 count 선언
	static int count = 0;
	
	//배열의 인덱스를 조작하기 위해 인덱스를 변수화시킴
	//배열의 인덱스는 0번부터 출발함으로 초기값을 0바로 이전값인 -1로 세팅하여 초기에
	//next를 실행했을때 인덱스가 0이되어 첫번째 고객을 조회하기 위함
	static int index = -1;
	static Scanner scan = new Scanner(System.in);

//userDefinedMethod
	//고객정보를 입력받는 메서드 선언
	public static void insertData() {
		System.out.println("==============고객정보입력=============");
		
		System.out.print("이름 : ");
		String name = scan.next();
		
		System.out.print("성별(M/F): ");
		char gender = scan.next().charAt(0);
		
		System.out.print("이메일: ");
		String email = scan.next();
		
		System.out.print("출생년도: ");
		int birth = scan.nextInt();
		
		nameList[count] = name;
		genderList[count] = gender;
		emailList[count] = email;
		birthList[count] = birth;
		
		System.out.println("=====================================");
		count++;
	}
	public static void disp() {
		for(int i=0;i<count;i++) {
			System.out.println(nameList[i]);
			System.out.println(genderList[i]);
			System.out.println(emailList[i]);
			System.out.println(birthList[i]);
		}
	}
	public static void printData(int index) {
		System.out.println("\n===========고객정보=============");
		System.out.println(nameList[index]);
		System.out.println(genderList[index]);
		System.out.println(emailList[index]);
		System.out.println(birthList[index]);
		System.out.println("\n==============================");
	}
	//고객정보를 수정하는 메서드 선언
	public static void updateData(int index) {
		System.out.println("\n============고객정보수정==============");
		//새로운 정보들을 입력받아 각각의 배열의 수정 인덱스에 있는 데이터를 변경시키세요.
		//수정시에는 수정전의 정보들이 출력되도록 하세요
		//ex) 이름(홍길동): (새로운이름 입력)
		//	   성별(남) : (새로운성별)
		//   이메일(jkq@naver.com) : (새로운 이메일)
		//   출생년도(1909) : (새로운 출생년도)
		
		if(count==0) {
			System.out.println("데이터를 먼저 입력해주세요."
					+"\n현재 데이터가 하나도 없습니다.");
			return;
		}
		System.out.printf("이름(%s): ", nameList[index]);
		nameList[index] = scan.next();
		//nameList[index] = scan.next() 라고 해도 됨
		
		System.out.printf("성별(%c): ", genderList[index]);
		genderList[index] = scan.next().charAt(0);
		
		System.out.printf("이메일(%s): ", emailList[index]);
		emailList[index] = scan.next();
		
		System.out.printf("출생년도(%d): ", birthList[index]);
		birthList[index] = scan.nextInt();
		
		 
		
		System.out.println("=====================================");
		
	}
	public static void deleteData(int index) {
		for(int i=index;i<count-1;i++) {
			nameList[i]=nameList[i+1];
			genderList[i]=genderList[i+1];
			emailList[i]=emailList[i+1];
			birthList[i]=birthList[i+1];
		}
		count--;
	}
	
//main
	public static void main(String[] args) {
//while
		while(true) {
			System.out.println("\n[INFO] 고객수: " + count
					+ ", 인덱스: " + index);
			System.out.println("메뉴를 입력하세요.");
			System.out.println("(I)nsert, (P)revious, "
					+ "(N)ext, (C)urrent, (U)pdate, "
					+ "(D)elete, (Q)uit");
			System.out.print("메뉴 입력: ");
			String menu = scan.next();
			
			menu = menu.toUpperCase();
			char m = menu.charAt(0);
//switch
			switch(m) {
			case 'ㅑ':
			case 'I':
				System.out.println("\n고객정보 입력을 시작합니다.");
				insertData();
				System.out.println("고객정보가 정상적으로 입력되었습니다.");
//				System.out.println("현재 종류별 총 입력정보");
//				System.out.println(Arrays.toString(nameList));
//				System.out.println(Arrays.toString(genderList));
//				System.out.println(Arrays.toString(emailList));
//				System.out.println(Arrays.toString(birthList));
				break;
			case 'ㅔ':
			case 'P':			
				System.out.println("\n이전 고객정보를 조회합니다.");
				if(index<=0) {
					System.out.println("이전 데이터가 없습니다.(현재 첫번재)");
					continue;
				}
				index--;
				printData(index);
				break;
			case 'ㅜ':
			case 'N':
				System.out.println("\n다음 고객정보를 조회합니다.");
				if(index==count-1) {
					System.out.println("다음 데이터가 없습니다.(현재 마지막)");
					continue;
				} 
				index++;
				printData(index);
				break;
			case 'ㅊ':
			case 'C':
				System.out.println("\n현재 고객정보를 조회합니다.");
				if(count==0) {
					System.out.println("데이터를 먼저 입력해주세요."
							+"\n현재 데이터가 하나도 없습니다.");
					continue;
				}
				printData(index);
				break;
			case 'ㅕ':
			case 'U':
				System.out.println("\n현재 고객정보를 수정합니다.");
				updateData(index);
				break;
			case 'ㅇ':
			case 'D':
				System.out.println("\n현재 고객정보를 삭제합니다.");
				if(count==0) {
					System.out.println("데이터를 먼저 입력해주세요."
							+"\n현재 데이터가 하나도 없습니다.");
					continue;
				}
				if(index<0) {
					System.out.println("index값을 변경하세요.");
					continue;
				}
				deleteData(index);
				break;
			case 'ㅂ':
			case 'Q':
				System.out.println("\n프로그램을 종료합니다.");
				scan.close();
				System.exit(0);	//프로그램을 강제종료하는 구문
				break;
			default:
				System.out.println("\n메뉴를 잘못 입력하셨습니다.");
			}//switch
		}//while
	}//main
}//class












######################################################################################################
개념정리_배열의 삭제


#배열 {1,2,3,4}가 있을때 1번인덱스를 삭제하면
 1,3,4,4가 되도록 삭제해야하고 사용자한테는 시스템상 마지막 4를 안보이게해서 논리적으로는 사라진것처럼 보이게해야한다.
	??궁금:근데 왜 굳이 마지막거 널로 안채우지? 널로채우면 더 직관적이고 좋은듯한데
 

import java.util.Arrays;

public class _4ArrayDelete {
	public static void main(String[] args) {
		int[] iArr = {1,3,5,7,9,11,13};
		System.out.println(Arrays.toString(iArr));
		
		int index=3;
		for(int i=index;i<iArr.length-1;i++) {
			iArr[i] = iArr[i+1];
		}
		System.out.println(Arrays.toString(iArr));
		String[] nameList = new String[100];
		nameList[0]="홍길동";
		nameList[1]="신사임당";
		nameList[2]="이순신";
		nameList[3]="강감찬";
		System.out.println(Arrays.toString(nameList));
		//||nameList[i+1]!="0"
		
		int count = 4;
		for(int i=1;i<count-1;i++) {
			nameList[i] = nameList[i+1];			
		}
		System.out.println(Arrays.toString(nameList));
	}
}





######################################################################################################




















######################################################################################################
개념정리_실행파일만들기

<eclips->.jar만들기>
실행중인 소스코드중지
프로젝트우클릭
export
java디렉터리클릭
Runnable JAR file 클릭 -next 클릭
Launch configuration에서 빼고싶은 class 클릭
저장위치및 이름선택
finish
ok

<window>
해당위치에 생겼는지확인
jsmooth 설치

<jsmooth>
skeleton
selection의 none이라 되어있는곳 클릭
console wrapper 클릭
	-console wrapper : 도스프로그램만들때
	-windowed wrapper : 윈도우그래픽프로그램만들때

excutable클릭
excutable binary에서 .jar클릭-클릭 후 binary에 경로가 입력되는데 .jar를 .exe로 수동변경할것
	-어떤파일을 실행가능하게 만들것이냐 묻는거임
		-내생각에는 excuta에서는 exe로 만들때 이름뭘로할건지 묻는거고 그파일이름 다쓰기힘드니까 그냥 .jar가져와서
			.exe로만 바꾸는듯

2번째칸에서 실행파일의 아이콘이될 사진클릭
current directory에 '.'기호 하나만 표시

application클릭
embedded jar의 경로에 .jar클릭
	-use an embedded jar 클릭
main class위치에서 프로젝트 내 실제 실행파일로만들 클래스를 찍어줌

위에 톱니바퀴아이콘클릭
	-이때만들어지는파일은 해당 프로젝트의 클래스들을 언제든지 만들기위한 바로가기역할인가?


######################################################################################################






















######################################################################################################
개념정리_클래스 배경 및 기본코드


#객체
속성: 멤버변수, 필드
기능: 메서드



#아래 add함수를 3개 result를 3개만든것처럼 계속 코드를 재작성해야하는데 이게 낭비다(시간,인력,리소스)
	-그래서 하나의 설계를 만들어놓고 함수처럼 매번 재작성하는게 아니라 객체를 클래스로 찍어내자는것

public class _1Object_Basic1 {
	static int result1 = 0;
	static int result2 = 0;
	static int result3 = 0;
	public static int add1(int n) {
		result1 += n;
		return result1;
	}
	public static int add2(int n) {
		result2 += n;
		return result2;
	}
	public static int add3(int n) {
		result2 += n;
		return result2;
	}
	public static void main(String[] args) {
		System.out.println("1번 계산기 계산결과!");
		System.out.println("=======================");
		System.out.println(add1(6));
		System.out.println(add1(14));
		System.out.println(add1(140));
		
		System.out.println("2번 계산기 계산결과!");
		System.out.println("=======================");
		System.out.println(add2(64));
		System.out.println(add2(10));
	}
}


----------------------------------------------------


#위의 낭비를 해결(시간낭비,인력낭비,리소스낭비_코드영역) + 관리용이 (절차지향은 위처럼 모든걸 함수나 코드로 작성해야해서
							1번계산기로 넣으려면 또 배열을 만들어서 추가적으로 변수들을
							입력해 모아두어야한다. 구조체를 만들던가. 그러면 그변수와
							그변수에 맞는 함수를 외우고서 같이 실행해야하는데
							클래스는 그러한것을 모두 없애준다)


public class _2Calculator {
	int result = 0;
	int add(int n) {
		result += n;
		return result;
	}
	int sub(int n) {
		result-=n;
		return result;
	}
	int mul(int n) {
		result*=n;
		return result;
	}
	
}

public class _3CalMain {
	public static void main(String[] args) {
		_2Calculator c1 = new _2Calculator();	//1번계산기 생성
		_2Calculator c2 = new _2Calculator();	//2번계산기 생성
		
		c1.add(14);
		c1.sub(7);
		c1.mul(6);
		
		c2.add(5);
		c2.sub(4);
		c2.mul(6);
		
		System.out.println("1번계산기 결과값: "+c1.result);
		System.out.println("2번계산기 결과값: "+c2.result);		
	}
}


######################################################################################################











