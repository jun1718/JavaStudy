21.09.06_10회차 
======================================================================================================
*복습
======================================================================================================




######################################################################################################
개념정리_객체지향프로그래밍 

클래스 내부에 속성(멤버변수)과 기능(함수)

Marker rPen = new Marker();
c와다르게 자바는 rPen앞에 에스크립터를붙여서 포인트변수화 하지 않아도 자동으로
포인트변수화시킨뒤 주소를 저장하나보다.
그럼 배열과마찬가지로 객체를 스택에서 구현은불가능한가?

modifire: 접근제한자

#객체 이용
아래보면 blackPen을 포인터변수화안해도 자동 포인트변수화가된다.
왜냐면 스택에 어차피 클래스를 만들지 못하니 무조건 포인트변수화해놓은듯하다
그럼 마찬가지로 스택에 없으니 .을 찍는경우도 *없이 .만찍어도된다.
스택이 있으면 구분하기위해 스택에선 그냥 .만찍고 포인터변수인경우 차이를 구분하기위해 *.을 찍는데
어차피 모두다 포인터로 *을 찍을거면 찍지말자고 합의했나보다.
안찍어도 그건 포인터밖에 없으니까
즉 -> .*이 무의미해졌고 .하나가 모두 함축한다는 뜻이다.


//설계용 클래스(라이브러리 클래스)는 메인메서드를 작성하지 않는다.
public class Pen {
	//객체의 속성을 나타내는것을 필드(멤버변수)라고 부름
	String color;
	int price;
	
	//객체의 기능을 나타내는 것을 메서드(멤버함수)라고 부름
	void write() {
		System.out.println(color + "색 글을 씁니다.");
	}
	
	void info() {
		System.out.println("----------pen's Info------------");
		System.out.println("색상: "+color);
		System.out.println("가격: "+price);
		//배열은 동종모음구조라 지금처럼 여러 형태의 데이터를 저장불가능하며 기능함수를
		//묶을수없다.
		
		
	}

}

public class PenMain {
	public static void main(String[] args) {
		//Pen의 기능과 속성을 사용하려면 설계용 클래스를 로딩시켜 pen 객체를 생성해야함
		Pen blackPen = new Pen();
		blackPen.color = "검정";
		blackPen.price = 400;
		
		blackPen.write();
		blackPen.info();
		
		Pen redPen = new Pen();
		redPen.color = "빨강";
		redPen.price = 600;
		redPen.write();
		redPen.info();
		
		
		System.out.println(blackPen);
		System.out.println(redPen);
				
		
		Pen bluePen = new Pen();
		bluePen.color = "파랑";
		bluePen.price = 500;
		
		bluePen.write();
		bluePen.info();
		
	
	}

}



######################################################################################################








######################################################################################################
개념정리_변수

#매개변수에 디폴트값을 넣는다고해서 c처럼 디폴트매개변수가 되지 않는다. 그런건 지원안함


public class Variable {
	//필드(멤버변수) 선언.
	int a; //초기화하지 않으면 기본값으로 자동 초기화
	
	//메서드 선언
	void printNumber(int c) {
		//지역변수 b와 매개변수 c를 선언
		int b=0;
		
		System.out.println("멤버변수: "+a);
		System.out.println("지역변수: "+b); //멤버, 매개는 초기화안되어있어도
										//출력등 사용가능한데 지역변수는 반드시
								//초기화해야 출력가능하다. 멤버나 매개는 밖에서
								//들어올것을 알기때문이다.
								//멤버변수는 초기화하지 않아도 기본값으로 자동초기화된다
								//매개는 반드시 밖에서 들어온다
		System.out.println("매개변수: "+c);
		
	}
	
	public static void main(String[] args) {
		Variable  v = new Variable();
		v.printNumber(5);
	}
}
 

######################################################################################################




















######################################################################################################
예제15)계좌관리프로그램

offshoot의 AccountManager.exe와 똑같이 프리코딩하시오.

클래스명: Account 
	멤버변수 : name, password(int), balance(int)->계좌내 잔액
	멤버함수 : 출금(withDrawMoney), 입금(deposit), 잔액조회(getBalance)
	
main클래스: AccountManager
	멤버변수 : 알아서
	멤버함수 : 알아서


public class Account {
	String name;
	int password;
	int balance;
	
	void deposit(int money) {
		balance += money;
		System.out.println(money+"원 입금되었습니다.");
	}
	void withDrawMoney(int money) {
		balance -= money;
		System.out.println(money+"원 출금되었습니다.");
	}
	int getBalance() {
		return balance;
	}
}


import java.util.Scanner;

public class AccountManagerReview {
	static Scanner scan = new Scanner(System.in);
	
	public static int pwCheck(Account p1) {
		System.out.println("계좌 비밀번호를 입력하세요.");
		System.out.print("> ");
		int password = scan.nextInt();
		if(p1.password!=password) {
			System.out.println("비밀번호가 틀렸습니다.\n메뉴로 돌아갑니다.");
		}
		return password;
	}
	
	
	
	
	public static void accountAccounting(Account p1) {
		System.out.println("계좌를 등록합니다.");
		System.out.print("이름: ");
		p1.name = scan.next();
		
		System.out.print("비밀번호: ");
		p1.password = scan.nextInt();
		
		System.out.print("처음 입금액: ");
		p1.balance = scan.nextInt();
	}
	public static int menu() {
		System.out.println("\n메뉴를 입력하세요.");
		System.out.println("1.예금 / 2.출금 / 3.잔액조회 / 4.종료");
		System.out.print("> ");
		int menu = scan.nextInt();
		
		return menu;
	}
	public static void deposit(Account p1) {
		if(pwCheck(p1)==p1.password) {	
			System.out.print("입금액 입력: ");
			int money = scan.nextInt();
			p1.deposit(money);
		}
	}
	public static void withDrawMoney(Account p1) {
		if(pwCheck(p1)==p1.password) {	
			System.out.print("출금액 입력: ");
			int money = scan.nextInt();
			
			if(money>p1.balance) {
				System.out.println("잔액부족입니다! 슈퍼가서 돈넣고 오세요^^");
				return;
			}
			
			p1.withDrawMoney(money);
		}
	}	
	public static void getBalance(Account p1) {
		if(pwCheck(p1)==p1.password) {			
			System.out.println(p1.name+"님의 계좌잔액은 "+p1.getBalance()+"원입니다.");
		}
	}
	
	public static void main(String[] args) {
		Account p1 = new Account();
		accountAccounting(p1);	
		
		while(true) {
			int menu = menu();
			
			if(menu==1) {
				deposit(p1);
			}
			if(menu==2) {
				withDrawMoney(p1);
			}
			if(menu==3) {
				getBalance(p1);
			}
			if(menu==4) {
				System.out.println("\n프로그램을 종료합니다.");
				System.exit(0);
			}
		}
	}
}

######################################################################################################




답:








public class Account {
	String name; //이름
	int password; //비밀번호
	int balance; //입금액
	Account(){}
	Account(String aname, int pw, int money){
		name = aname;
		password = pw;
		balance = money;
	}
	//입금기능
	void deposit(int money){
		balance += money;
		System.out.println(money+"원 입금이 완료되었습니다.");
	}
	//출금기능
	void withDrawMoney(int money){
		balance -= money;
		System.out.println(money+"원 출금이 완료되었습니다.");
	}
	//잔액조회기능
	int getBalance(){
		return balance;
	}
}







import java.util.Scanner;

class AccountManager {

	static Scanner scan = new Scanner(System.in);
	
//codeCopy
	public static int inputPassword(Account p1){
		System.out.println("\n계좌 비밀번호를 입력하세요.");
		System.out.print("> ");
		int password = scan.nextInt();
		if(p1.password != password){
			System.out.println("비밀번호가 틀렸습니다. 메뉴로 돌아갑니다.");
		}
		return password;
	}


//userDefinedMethod
	public static void setAccountInfo(Account p1){
		System.out.println("계좌를 등록합니다.");

		System.out.print("이름: ");
		p1.name = scan.next();
		System.out.print("비밀번호: ");
		p1.password = scan.nextInt();

		System.out.print("입금액: ");
		p1.balance = scan.nextInt();
	}
	public static int setMenu(){
		System.out.println("\n메뉴를 입력하세요.");
		System.out.println("1. 예금 / 2. 출금 / 3 잔액조회 / 4. 종료");
		System.out.print("> ");
		int menu = scan.nextInt();
		return menu;
	}
	public static void deposit(Account p1){
		int password = inputPassword(p1);

		if (p1.password == password){
			System.out.println("\n입금액을 입력하세요");
			System.out.print("> ");
			int money = scan.nextInt();
			
			p1.deposit(money);
			
		}
	}
	public static void withDrawMoney(Account p1){
		int password = inputPassword(p1);

		if(p1.password == password){
			System.out.println("\n출금액을 입력하세요");
			System.out.print("> ");
			int money = scan.nextInt();
			
			if(money>p1.getBalance()){
				System.out.println("당신 돈 부족해! 돈부터 채워 잔액이 부족합니다.");
				return;
			}
			p1.withDrawMoney(money);
		}
	}
	public static void balanceCheck(Account p1){
		int password = inputPassword(p1);
		if (p1.password == password){
			System.out.printf("%s님의 계좌잔액은 %d원입니다.\n", p1.name, p1.getBalance());
		}
	}

//main
	public static void main(String[] args) {
		Account p1 = new Account();
		setAccountInfo(p1);

		while(true){
			int menu = setMenu();

			if(menu==1){
				deposit(p1);
			}
			else if(menu==2){
				withDrawMoney(p1);
			}
			else if(menu==3){
				balanceCheck(p1);
			}
			else if(menu==4){
				System.out.println("\n프로그램을 종료합니다.");
				System.exit(0);
			}
		}//while
		
	}//main
	
}//class
	



















