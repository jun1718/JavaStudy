21.08.27_2회차
======================================================================================================
*변수, 식별자, 정수형 종류 및 표현방법(+int형정수 내 진수체계에 따른 종류 및 표현방법)
======================================================================================================


#######################################################################################################
개념정리_주석 및 출력함수, 블록, 공백

주석종류
1.한줄주석(//)
2.여러줄주석 (/**/)
3.document 생성용 주석(/** ~~~ */) : api 문서 생성용 주석
	-/** 후 엔터누르면 자동으로 만들어짐
	/**
	 * 이 주석은 API문서 생성용 주석입니다.
	 * 개발자가 만든 코드를 api화 시킬때
	 * 코드의 라이센스 정보 및 설명을 첨언하는 용도의 주석입니다.
	 * @author Mr. jun
	 * @version 1.0.0
	 * @since 2021.08.27~
	 */

*참고 : {}블록, ;콜론, whitespace공백



#main함수 세팅


public class CommentsExample {

	//main함수는 프로그램을 실행하기위해 
	//반드시 작성해야하는 함수(메서드)
	//main함수 블록안에 들어있는 코드의 명령들을 실행
	//main함수를 쉽게 작성하시려면 이클립스 코드작성부에
	//main 이라고 입력하고 ctrl+space를 이용하면쉽게가능
	public static void main(String[] args) {
		
	}
}


#실행명령 단축키 : ctrl + f11

#출력 명령  : print, println, printf

#println() : 자동으로 줄개행이 포함 sysout 소문자적고 ctrl+space누르면 자동으로 system.out.println()나옴

public class CommentsExample {
	public static void main(String[] args) {
		System.out.print("안녕~~\n");
		System.out.print("잘가~~\n");
		System.out.println("메롱메롱~~!");
		System.out.println("메롱메롱~~!");
	}
}

#printf(c언어 포맷팅과 같음)
System.out.printf("%d + %d = %d", 10, 3, 13);


#블록 : 필수
-블록은 중괄호로 묶은 부분을 말하며, 복합문을 구성하는 요소
	-종속된 문장이 다수 개일때 '{'로 시작하고 '}'로 닫음

#공백(white space) : 필수가 아님
-빈칸, 탭, 빈 줄 등이 있으며 이러한 공백은 소스코드를 보기 좋게 하고 알아보기 쉽게하는데 사용. 
	-프로그램을 구조화 형태로 표현하는데 유용
-들여쓰기 단축키 : ctrl A(혹은 특정영역) 후 ctrl i


#######################################################################################################











#######################################################################################################
개념정리_식별자

#식별자 : 자바 언어에서 식별자는 클래스명, 변수명, 메서드명 등 사용자가 만들어서 이용하는 고유한 이름을 식별자라함
-식별자 생성규칙(문법적으로 적용된 규칙)
	1.대,소문자를 구분하며 길이 제한은 없음
	2.문자와 숫자, 밑줄(_), 달러기호($)를 포함할수 있음
	3.문자, 밑줄, 달러기호로 시작가능(숫자외엔 모든것으로 시작가능하다는 뜻임)
	4.숫자로 시작x
	5.공백 포함x
	6.키워드(예약어)는 식별자이름으로 x

#식별자 이름 규칙(개발자들의 약속)
1.클래스/인터페이스 이름 규칙 
-명사나 형용사를 서술적으로 연결하여 사용
-첫글자는 대문자로 표기
-연결된 단어의 첫글자도 대문자로 표기 : 카멜표기법이라한다(낙타등처럼굽이굽이라서) 
ex)HelloWorld, MyCalculator
MyWalletForMe

2.변수 이름 규칙 
-명사적 의미를 갖게 만들어야한다
-첫글자는 소문자, 연결 단어의 첫글자는 대문자로 표기(클래스와차이점은 첫글자를 대문자로하느냐 하지않느냐의차이, 클래스만 첫글자대문자)
customerAge, phoneNumber 

3.메서드 이름규칙(함수)
-동사적 의미를 갖게 만들어야함(기능을 나타내니까)
-첫글자는 소문자, 연결단어의 첫글자는 대문자로 표기
-메서드 이름 뒤에는 반드시 한 쌍의 괄호()가 뛰따름
-일반적으로 메서드 이름에는 "_"를 사용하지 않음
writeView(), join()

4.상수(심볼릭상수를말하는거임) 이름 규칙
-모든 문자는 대문자로 표기
-단어와 단어사이는 "_"로 연결 : 여기서 밑줄쓰니 상수랑헷갈릴까바 변수에서 _하지마라는거

NUMBER_ONE, LOGIN_OK




#######################################################################################################
















#######################################################################################################
개념정리_변수

#변수선언 : 자료형 변수식별자
	-같은 타입의 변수를 선언할 때는 콤마(,)로 나열 가능
int score;
int num1 = 10, num2 = 20;

#변수초기화 : 변수식별자 = 초기화할 값 -> 공간에 처음 값을넣는과정을 초기화라함
score = 50;

#초기화와 선언이 동시에 진행되기도함
int score = 50;

#l-value r-value
score 		= 		500;
l-value   assignment(대입,할당)	r-value
영역(공간)	  대입연산자		값



public class VariableBasic {
	public static void main(String[] args) {
		/*
		 * 변수의 선언
		 * ex)[자료형] [변수 식별자 이름];
		 * 변수는 동일한 이름으로 중복 선언할수 없습니다.
		 * int는 정수를 저장하는 대표적인 자료형입니다
		 * String은 문자열을 저장하는 대표적인 자료형입니다.
		 */
		
		int score;
		//변수의 초기화(initialization)
		score = 50;
		System.out.println(score);
		
		//변수의 선언과 초기화를 동시에가능
		int life = 3;
		
		//변수에는 다른 변수의 값을 저장할수도 있음
		int result = score + life;
		
		System.out.println(result);
		
		//변수는 자료형이 다르더라도 동일이름으로 중복선언할수 없습니다.
		//String score;
		score = "abc";
	
		 
	}
}

#######################################################################################################







#######################################################################################################
개념정리_변수의 사용범위
#변수의 사용범위
-변수는 중괄호 안에서 선언되고 사용됨
-변수는 선언된 블록내에서만 사용가능
-변수는 블록이 끝나면 메모리상에서 제거


#######################################################################################################




#######################################################################################################
개념정리_기본데이터타입(기본자료형)

정수(4개, byte(1)_short(2)_int(4)_long(8)), 실수(2개, double(8)_float(4)), 
	논리(1개,boolean(1bit)), 문자(1개, char(2byte))

byte : -2^7 ~ 2^7-1 (-128 ~ 127)
int : -2^31 ~ 2^31 -1 (-21억4천n개 ~ 21억4천n개-1)
float : 4byte, 7자리의 소수
double : 8byte, 15자리의 소수
boolean : 1bit, true false
char : 2byte, 유니코드(c보다 1byte 많은 이유가 유니코드추가때문임) : 단일문자만 저장가능
	\u0000 ~ \uFFFF (0 ~ 65535)

**String : 기본자료형은 아니지만 기본자료형만큼 많이 씀
-variable(값에따라 크기가다름), 각 위치에 char가 있는거 (0000 ~ FFFF)


#상수종류 및 표현
1)크기에 따른 상수분류
int형 상수
double형 상수
	-표현방식
	int형 상수표현 : -2147483648 ~ 2147483647 의 수를 그냥 적으면 됨
	double형 상수표현 : 2147483647L 


public class _4IntegerExample {
	public static void main(String[] args) {
//		byte a = 128;
//		short b = 32768;
//		int c = 2147483648;
//		long d = 2147483648;
		byte a = 127;
		short b = 32767;
		int c = 2147483647;
		long d = 2147483648L;
		
		System.out.println(d);
		//int b3 = 21L;
//모든 숫자 리터럴상수를 적으면 모두 int형 상수로 받아들임
//int형 상수는 jdk에 -2147483648 ~ 2147483647 까지 선언되어 있음
		//이름이없어서 접근이불가함으로 상수만 값을 그대로써서 사용함
//2147483648이상의 수를 치면 숫자 리터럴상수형식이니까 int형 상수로 인식하고
		//상수중에 해당 값으로 저장된 공간을 찾음->없음 ㅋ 
		//그래서 int형 상수에는  그런 값이 없다 라고해서 에러나는거
//그럼 long형 숫자 리터럴 상수를 표현하려면 어떻게해야할까?
		//숫자뒤에 L을 적으면됨
		//int형 상수표현방식 : 그냥 상수 숫자 적는것
		//long형 상수표현방식 : int형표현방식마지막에 L적는것
		//상수들은 l-value, 대입연산자와 함께 사용하지 않으면 
			//ex)2147483648; //int형상수표현해서 거기서 
		//2147483648찾아보지만 없으니 에러남 즉 long형을 int형으로
		//표현하여 에러
		
	}
}





2)int형 상수에서 진수체계에 따른 분류
2진수 상수
8진수 상수
	-표현방식
	10진수 상수표현 : 64;
	8진수 상수표현 : 064;	0하나가 8진수 상수임을 표현하는 방식임
	2진수 상수표현 : 0b1010;    0b가 2진수 상수임을 표현하는 방식임
	16진수 상수표현 : 0x3a4c;   0x가 16진수 상수임을 표현하는 방식임




public class _4IntegerExample {
	public static void main(String[] args) {

		//2진수 저장시에 정수 앞에 접두어로 0b를 붙임
		int bin = 0b1010;
		System.out.println("2진수 1010: " + bin);

		//8진수 저장시에 정수 앞에 접두어로 0b를 붙임
		int oct = 064;
		System.out.println("8진수 64 : " + oct);
		
		//16진수 저장시에 정수 앞에 접두어로 0x를 붙임
		int hex = 0x3a4c;
		System.out.println("16진수 3a4c : " + hex);
		
		
	}
}


#프로젝트 압축하여(소스코드 및 기타파일) 내보내기(export)
-내보낼 프로젝트 우클릭->General->Archive File

#가져오기
-file->import->general->existing projects into workspace->select archive file -> Browse(압축된거선택)

#######################################################################################################