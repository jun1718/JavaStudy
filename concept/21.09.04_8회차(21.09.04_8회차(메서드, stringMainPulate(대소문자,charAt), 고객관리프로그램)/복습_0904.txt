21.09.04_8회차
======================================================================================================
*복습
======================================================================================================




























######################################################################################################
개념정리_메서드 및 매개변수 개념


함수: 클래스가 아닌 전역에 선언되고 정의된함수
메서드: 클래스안에 선언되고 정의된 함수

자바: 클래스밖에없기때문에 함수가없고 모두 메서드라부름

*메서드(method) : 코드반복을 막기위함
-메서드는 정의하는 과정과 호출하는 과정이 있음
-메서드 선언은 메서드 내부에서는 할수없음 반드시 메서드블록 위부에서만 선언가능
	-main안에서 못만든단소리
	-class내부에서만가능
-메서드 내부에서는 다른 메서드의 호출만 가능
-호출하는 과정은 메서드를 사용하는 과정이며 해당메서드가 필요로하는 데이터(매개값)를 메서드 내부로 전달하면서 해당 메서드는
 매개값을 통해 처리한 결과값을 호출부로 다시 반환해줌


public class _1MethodExample1 {
	public static int calcSum(int num){
		int sum=0;
		for(int i=1;i<=num;i++) {
			sum+=i;
		}//endFor
		return sum;
	}//endMethod
	public static int calcSum2(int begin, int end) {
		int sum=0;
		//short sum=0;가능 왜냐면 반환될때 int로 자동형변환되기때문임 작은놈->큰놈
		for(int i=begin;i<=end;i++) {
			sum+=i;
		}
		return sum;
	}
	
	public static void main(String[] args) {
		System.out.println("1~10까지 누적합: "+calcSum(10));
		System.out.println("1~20까지 누적합: "+calcSum(20));
		int result = calcSum(100);
		System.out.println("1~100까지 누적합: "+result);
		System.out.println(0+"~"+100+"까지의 누적합: "+calcSum2(0,100));
		
	}//endMain
}//endClass


#매개변수
-매개변수는 메서드를 호출할때 실행에 필요한값들을 메서드 내부로 전달하기위한 매개체
-메서드 호출부에서 어떤매개값을 전달하느냐에 따라 메서드의 실행결과가 달라짐
-매개변수를 몇개전달받을지는 메서드를 선언할때 선언부에서 결정해야함
-매개변수를 하나도 선언하지 않을수 있으며 이때는 메서드 선언부의 ()를 비워둠 그리고 호출시에도 ()를 비워서 호출함





public class _1MethodExample2 {
	public static void main(String[] args) {
		System.out.println(calcSum());
		System.out.println(calcSum());
		System.out.println(calcSum());
		System.out.println(calcSum());
		System.out.println("이번에 획득한 무기: "+randomWeapon());
	}
	
	public static int calcSum() {
		int sum=0;
		for(int i=1;i<=100;i++) {
			sum+=i;
		}
		return sum;
	}
	public static String randomWeapon() {
		double d=Math.random();
		if(d>0.66) return "단검";
		else if(d>0.33) return "장궁";
		else return "지팡이";
	}
}




######################################################################################################


















######################################################################################################
개념정리_반환값 개념

#반환유형(return type)

1.반환값은 메서드를 호출한 곳으로 메서드의 최종실행 결과를 전달하는 값임
2.매개변수는 여러개 존재할수있지만 반환값은 오직 하나여야함
3.return이라는 키워드를 사용하여 return 뒤에 전달할 값을 지정
4.전달할 값의 데이터 타입을 반환유형이라고 하며 메서드를 선언할때 메서드 이름 앞에 반환유형을 명시해야함
5.반환값이 있는 메서드는 호출문이 하나의 값이 되기때문에 반화된 값을 다른변수에 대입할수도있고 다른 메서드의 매개값으로 사용할수도
	있음

6.모든 메서드가 반환값이 필요한것은 아님 메서드 실행 이후에 반환값이 없다면 return을 사용하지 않아도 된다.
	-이때는 반환유형을 선언시에 void라 해야함
7.모든 메서드는 return키워드를 만나면 강제로 종료됩니다. 따라서 return문 이하에 코드를 작성할수 없음
8.반환값이 없는 메서드는 반드시 단독호출해야함
	-변수에 저장하거나 다른 메서드의 매개값으로 사용불가




import java.util.Scanner;

public class _1MethodExample3 {
	public static int add(int n1, int n2) {
		return n1 + n2;
	}//add
	public static int[] totalOperate(int n1, int n2){
		int[] total= {n1+n2,n1-n2,n1*n2,n1/n2};
		return total;
	}//totalOperate
	public static void callMyName(String name) {
		if(name.length()<2) {
			System.out.println("이름은 2글자 이상으로 입력하세요!");
			return;
		}
		System.out.println("내 이름은 "+name+"입니다.!!");
	}//callMyName
	
	public static void main(String[] args) {
		int r = add(3,5);
		System.out.println(r);
		
		int r2=add(add(4,6), add(8,7));
		System.out.println(r2);
		
		int[] tot=totalOperate(30,5);
		System.out.println("30 + 5 = "+tot[0]);
		System.out.println("30 - 5 = "+tot[1]);
		System.out.println("30 * 5 = "+tot[2]);
		System.out.println("30 / 5 = "+tot[3]);
		callMyName("리덕화");
		
		System.out.println("---------------------------");
		Scanner sc = new Scanner(System.in);
		System.out.print("이름 입력: ");
		String name = sc.nextLine();
		callMyName(name);
	}//main
}//class


######################################################################################################

















######################################################################################################
개념정리_string mainpulate


#대소문자 변경 / Stirng 문자열에서 특정문자 반환(변수, 버퍼)

public class StringMainPulate {
	public static void main(String[] args) {
		String str = "iNSERT";
		System.out.println(str);
		
		//문자열을 일괄적으로 소문자로 변환하는 메서드는 toLowerCase()
		str = str.toLowerCase(); //반대 : toUpperCase()
		System.out.println(str);
		
		str = str.toUpperCase();
		System.out.println(str);
		
		//문자열에서 특정 문자 하나만 가져오는 메서드는 charAt(문자열인덱스번호)입니다.
		char c = str.charAt(0);			//str이란 변수에서 0번인덱스 가져오기
		System.out.println(str.charAt(0));
		System.out.println(c);
		
	}//main
}//class



char gender = scan.next().charAt(0);	//버퍼에서 바로 0번인덱스만 가져오기


######################################################################################################





















######################################################################################################
예제14)고객관리프로그램(다음 강의를 통해 완성될 예제_정보수정, 정보삭제 기능이 없음)



#요구사항정의
-고객의 정보는 이름,성별,이메일,출생년도가 있습니다. 고객의 정보를 입력받아 배열에 저장해야합니다. 이름은 문자열로 저장하며, 
 성별은 남자는 M, 여자는 F로 저장합니다. 이메일은 문자열로 저장하며 태어난 출생년도는 정수로 저장합니다.
-고객관리프로그램은 고객의 정보를 저장, 조회, 수정, 삭제할 수 있는 기능이 있어야 합니다. 고객 정보를 파일에 저장하는 기능을 구현하지 않아도 
 됩니다.
-I를 눌러 고객의 정보를 입력받도록 하며, 저장된 고객정보는 P또는 N을 눌러 이전 고객정보 또는 다음 고객정보를 조회할수 있어야합니다.
 조회한 고객정보는 U를 눌러 새로운 정보로 수정할수 있어야합니다. D를 누르면 조회한 고객 정보를 배열에서 삭제해야 합니다. 프로그램의 
 종료는 Q를 누릅니다.



import java.util.Scanner;

public class wdwq {
//variable
	static String[] nameList = new String[100];
	static char[] genderList = new char[100];
	static String[] emailList = new String[100];
	static int[] birthList = new int[100];
	static int count = 0;
	static int index = -1;
	
	static Scanner scan = new Scanner(System.in);

//userDefinedMethod
	public static char menu() {
		System.out.println("현재 count : "+count+"/ index : "+index);
		System.out.println("아래보기중 필요한 기능의 명령어를 입력하세요.");
		System.out.println("[I]nsert, [P]revious, [C]urrent,"
				+ "[N]ext, [U]pdate, [D]elete, [Q]uit");
		System.out.print("명령어입력 > ");
		String menu = scan.next();
		
		menu = menu.toUpperCase();
		char m = menu.charAt(0);
		
		return m;
	}
	public static void setData() {
		System.out.print("이름 입력: ");
		String name = scan.next();

		System.out.print("성별 입력(M/W): ");
		char gender = scan.next().charAt(0);
		if(gender=='w') gender-=32;

		System.out.print("메일 입력: ");
		String email = scan.next();

		System.out.print("출생년도 입력: ");
		int birth = scan.nextInt();
		
		nameList[count] = name;
		genderList[count] = gender;
		emailList[count] = email;
		birthList[count] = birth;
		
		index=count;
		count++;
	}
	public static void dispLast() {
		System.out.println("이름: "+nameList[count-1]);
		System.out.println("성별: "+genderList[count-1]);
		System.out.println("메일: "+emailList[count-1]);
		System.out.println("출생: "+birthList[count-1]);
	}
	public static void printData() {
		System.out.println("==============정보조회================");
		System.out.println("이름: "+nameList[index]);
		System.out.println("성별: "+genderList[index]);
		System.out.println("메일: "+emailList[index]);
		System.out.println("출생: "+birthList[index]);
		System.out.println("===================================");
	}
	

//main
	public static void main(String[] args) {
		
		while(true) {
			char m = menu();
			switch(m) {
			case 'ㅑ':
			case 'I':
				System.out.println("정보입력을 시작합니다.");
				setData();
				System.out.println("정보입력이 완료되었습니다.");
				dispLast();
				break;
			case 'ㅔ':
			case 'P':
				if(count==0) {
					System.out.println("데이터 넣고오세요.");
					continue;
				}
				System.out.println("이전 데이터를 조회합니다.");				
				if(index==0) {
					System.out.println("현재 위치가 첫번째 공간입니다.\n"
							+ "이전 공간이 없어서 조회 불가능합니다.\n"
							+ "첫뻔째 데이터를 조회합니다.");
					printData();
					continue;
				}
				index--;
				printData();
				break;
			case 'ㅊ':
			case 'C':
				if(count==0) {
					System.out.println("데이터 넣고오세요.");
					continue;
				}
				System.out.println("현재 데이터를 조회합니다.");
				printData();
				break;
			case 'ㅜ':
			case 'N':
				if(count==0) {
					System.out.println("데이터 넣고오세요.");
					continue;
				}
				System.out.println("다음 데이터를 조회합니다.");
				if(index==count-1) {
					System.out.println("현재 위치가 마지막 공간입니다.\n"
							+ "다음 공간이 없어서 조회 불가능합니다.\n"
							+ "마지막 데이터를 조회합니다.");
					printData();
					continue;
				}
				index++;
				printData();
				break;
			case 'ㅕ':
			case 'U':
				break;
			case 'ㅇ':
			case 'D':
				break;
			case 'ㅂ':
			case 'Q':
				System.out.println("프로그램 종료합니다.");
				System.exit(0);
				break;
			}//end switch
		}//end while
	}//end main
}//end class

######################################################################################################




답:



import java.util.Arrays;
import java.util.Scanner;

public class CustomerManager {
	//프로그램 전체에서 사용할 변수들은 클래스블록 바로 아래에 선언합니다.
	//static이 붙은 블록에서는 static변수와 static 메서드만 사용할수 있음
	
//globalVariable
	static String[] nameList = new String[100];
	static char[] genderList = new char[100];
	static String[] emailList = new String[100];
	static int[] birthList = new int[100];
	
	//현재 고객데이터가 몇명 저장되었는지 알기위한 변수 count 선언
	static int count = 0;
	
	//배열의 인덱스를 조작하기 위해 인덱스를 변수화시킴
	//배열의 인덱스는 0번부터 출발함으로 초기값을 0바로 이전값인 -1로 세팅하여 초기에
	//next를 실행했을때 인덱스가 0이되어 첫번째 고객을 조회하기 위함
	static int index = -1;
	static Scanner scan = new Scanner(System.in);

//userDefinedMethod
	//고객정보를 입력받는 메서드 선언
	public static void insertData() {
		System.out.println("==============고객정보입력=============");
		
		System.out.print("이름 : ");
		String name = scan.next();
		
		System.out.print("성별(M/F): ");
		char gender = scan.next().charAt(0);
		
		System.out.print("이메일: ");
		String email = scan.next();
		
		System.out.print("출생년도: ");
		int birth = scan.nextInt();
		
		nameList[count] = name;
		genderList[count] = gender;
		emailList[count] = email;
		birthList[count] = birth;
		
		System.out.println("=====================================");
		count++;
		index++;
	}
	public static void disp() {
		for(int i=0;i<count;i++) {
			System.out.println(nameList[i]);
			System.out.println(genderList[i]);
			System.out.println(emailList[i]);
			System.out.println(birthList[i]);
		}
	}
	public static void printData(int index) {
		System.out.println("\n===========고객정보=============");
		System.out.println(nameList[index]);
		System.out.println(genderList[index]);
		System.out.println(emailList[index]);
		System.out.println(birthList[index]);
		System.out.println("\n==============================");
	}
	
	
//main
	public static void main(String[] args) {
//while
		while(true) {
			System.out.println("\n[INFO] 고객수: " + count
					+ ", 인덱스: " + index);
			System.out.println("메뉴를 입력하세요.");
			System.out.println("(I)nsert, (P)revious, "
					+ "(N)ext, (C)urrent, (U)pdate, "
					+ "(D)elete, (Q)uit");
			System.out.print("메뉴 입력: ");
			String menu = scan.next();
			
			menu = menu.toUpperCase();
			char m = menu.charAt(0);
//switch
			switch(m) {
			case 'ㅑ':
			case 'I':
				System.out.println("\n고객정보 입력을 시작합니다.");
				insertData();
				System.out.println("고객정보가 정상적으로 입력되었습니다.");
//				System.out.println("현재 종류별 총 입력정보");
//				System.out.println(Arrays.toString(nameList));
//				System.out.println(Arrays.toString(genderList));
//				System.out.println(Arrays.toString(emailList));
//				System.out.println(Arrays.toString(birthList));
				break;
			case 'ㅔ':
			case 'P':			
				if(count==0) {
					System.out.println("데이터를 먼저 입력해주세요."
							+"\n현재 데이터가 하나도 없습니다.");
					continue;
				}
				System.out.println("\n이전 고객정보를 조회합니다.");
				if(index==0) {
					System.out.println("이전 데이터가 없습니다.(현재 첫번재) "
							+ "\n첫번째 데이터를 다시 출력합니다.");
					printData(index);
					continue;
				}
				index--;
				printData(index);
				break;
			case 'ㅜ':
			case 'N':
				if(count==0) {
					System.out.println("데이터를 먼저 입력해주세요."
							+"\n현재 데이터가 하나도 없습니다.");
					continue;
				}
				System.out.println("\n다음 고객정보를 조회합니다.");
				if(count!=0&&index==count-1) {
					System.out.println("다음 데이터가 없습니다.(현재 마지막)"
							+ "\n가장 마지막 데이터를 출력합니다.");
					printData(index);
					continue;
				} 
				index++;
				printData(index);
				
				break;
			case 'ㅊ':
			case 'C':
				System.out.println("\n현재 고객정보를 조회합니다.");
				printData(index);
				break;
			case 'ㅕ':
			case 'U':
				System.out.println("\n현재 고객정보를 수정합니다.");
				break;
			case 'ㅇ':
			case 'D':
				System.out.println("\n현재 고객정보를 삭제합니다.");
				break;
			case 'ㅂ':
			case 'Q':
				System.out.println("\n프로그램을 종료합니다.");
				scan.close();
				System.exit(0);	//프로그램을 강제종료하는 구문
				break;
			default:
				System.out.println("\n메뉴를 잘못 입력하셨습니다.");
			}//switch
		}//while
	}//main
}//class

