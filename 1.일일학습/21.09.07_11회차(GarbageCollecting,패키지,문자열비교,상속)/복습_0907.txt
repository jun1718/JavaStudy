21.09.07_11회차 
======================================================================================================
*복습
======================================================================================================









######################################################################################################
개념정리_동적할당해제개념 및 패키지



* Garbage Collecting

- 객체를 생성하는데 사용되는 키워드는 new이지만, 생성된 객체를 메모리에서 해제시키는 키워드는 존재하지 않습니다.
- 그 이유는 자바에서는 자바 가상머신(JVM)이 알아서 메모리를 관리해주며, 이를 가비지 컬렉팅이라 합니다.
- 객체가 더 이상 프로그램에서 사용되지 않으면 가비지 컬렉터가 스스로 판단해서 메모리를 해제하고 수거합니다.

	-장점: 개발자가 해제를 신경쓰지 않아도된다.
	-단점: 시시각각 메모리를 제어하지 못한다.
		-마린태어나고죽고 계속관리해야하는데 그래서 게임을 c++로 만든다.

* 패키지(package)

- 클래스는 크게 2종류가 있습니다. 하나는 개발자가 직접 만들어 사용하는 사용자 정의  클래스이고,  다른  하나는 JDK(Java Development Kit)안에 포함되어 있거나, 다른 개발자들이 미리 만들어 놓은 클래스들이 있습니다.
- 그런데 이런 클래스들은 매우 종류가 많고 비슷한 기능들을 분류시켜야 할 필요성이 있기 때문에 서로 관계가 있는 클래스들을 패키지로 묶어서 관리합니다.
- 현재 클래스에서 다른 패키지의 외부 클래스를  사용하고 싶은 경우에  import 키워드로 해당 클래스의 전체 경로(패키지  명까지 포함)를 지정해줘야 합니다.

ex) import java.util.Scanner;

- 만약 해당 패키지 안에 들어있는 모든 클래스를 사용하고 싶다면 * 기호를 넣어주면 됩니다.     ex) import java.util.*;

- package 선언 방법

1. 사용자가 임의로 패키지를 만드려면 클래스의 가장 윗부분에 패키지 구문을 포함시키면 됩니다.    ex) package store;
1. 패키지 이름은 영문 소문자로 지정하는 것을 권장합니다.
1. 대분류와 소분류 패키지를 구분할 때는 .(dot)을 사용합니다.
1. 최상위 패키지의 이름은 java로 시작할 수 없습니다. java패키지는 표준 API들의 모음을 구성해놓은 패키지입니다.
1. 자바의 키워드들도 패키지이름으로 사용할 수 없습니다.



######################################################################################################







######################################################################################################
개념정리_변수 타입

변수의 타입에는 기본타입, 참조타입이 있다.

참조타입
-배열타입
-클래스타입
-인터페이스타입

String s1 = "안녕"
String s2 = "안녕"
s1 == s2 
동일클래스라면 주소가 같게 입력되서 true
	-저장한걸또저장하네? -> cpp의 참조변수개념으로 저장됨 공간을 공유함
다른클래스라면 주소가 다르게 입력되서 false

그럼 문자열은 비교어떻게해?
아래처럼 해!

객체동등비교 메서드 : eqauls()


s1.equals(s2)
	-맞으면 트루
	-틀리면 폴스 불린자료형을 반환함
package str_equals;

public class User {
	public static void main(String[] args) {
		String id="맹탕구리";
		String id2="맹탕구";
		String pw;
		System.out.println(id.equals(id2));
		System.out.println(id.equals("맹탕구리"));
		System.out.println("랑낭".equals("랑낭1"));
	}

}




######################################################################################################












######################################################################################################
개념정리_기본 및 참조타입 개념, equals

* 기본 타입(primitive type) vs 참조 타입(reference type)

- 기본 타입이란 정수, 실수, 문자, 논리 값을 저장하는 데이터 타입입니다.
- 참조 타입이란 객체의 주소를 참조하는 타입으로 배열, 클래스, 인터페이스 타입을 말합니다.
- 기본 타입으로 선언된 변수는 실제 값(value)을 변수 안에 저장하지만, 참조 타입으로 선언된 변수는 메모리의 주소값을 변수 안에 저장합니다.
- 참조 타입으로 선언된 변수는 스택(stack)영역에 주소값을 저장하고 내부의 실제 값은 힙(heap)영역에 저장합니다.



* 참조 타입 String과 객체 동등 비교 메서드 equals()

- 자바는 문자열이 동일하다면 String 객체를 공유하도록 되어있습니다.
그래서 단순히 문자열을 String 변수에 할당한다면 같은 주소값을 갖게 됩니다.

ex) String str1 = "Hello"; String str2 = "Hello";
--> str1 == str2 -> true

- 그러나 new키워드를 사용해서 String객체를 직접 heap영역에 생성한다면 문자열의 내용이 같더라도 다른 주소값을 가지게 되므로 동등, 비동등 연산자(==, !=)의 결과가 false로 나오게 됩니다.

ex) String str3 = new String("Hello"); String str4 = new String("Hello");
--> str3 == str4 -> false

- 그래서 동일 String객체이든 다른 String 객체이든 상관없이 문자열의 내용 값 그자체를 비교할 때는 equals()  메서드를 사용해야 합    니다.


######################################################################################################











######################################################################################################
개념정리_객체지향 기술, 상속개념

* 객체 지향 프로그래밍 기술

- OOP 기술에는 은닉(캡슐화:Encapsulation), 상속(Inheritance), 다형성(Polymorphism)이 있습니다.


* 상속(Inheritance)

- OOP에서 상속은 기존의 클래스를 확장하여 새로운 클래스를 이끌어내는 것을 의미합니다.
- 상속 관계는 is a 관계를 만족하는 관계입니다.
ex) 돌고래 is a 포유류 --> 돌고래는 포유류의 속성을 가지고 있다.
- 상속은 기존의 코드를 재사용함으로써 불필요한 코드를 재작성하는 번거로움을 없앨 수 있고, 새로운 클래스를 만드는 시간과 노력을       줄일 수 있습니다.
- 자바에서는 C++에서 사용했던 다중상속의 문제점때문에 단일상속만을 지원합니다.
	-다이아몬드구조 
- 어떤 클래스가 다른 클래스로부터 상속을 받아 만들어지면 새롭게 만들어진 클래스를 자식(child or sub)클래스라고 부르며, 멤버변수       와 메서드를 물려준 클래스는 부모(parent or super)클래스라고 부릅니다.
- 상속을 하면 부모클래스의 멤버변수와 메서드가 자식클래스에 상속이 됩니다. 그러나 부모클래스의 생성자는 상속이 되지 않습니다.
- 상속을 사용하는 키워드는 extends 입니다.
- 상속을 하더라도 부모 클래스에서 private 접근제한을 갖는 멤버변수와 메서드는 상속대상에서 제외됩니다.
- 자바의 모든 클래스는 Object 클래스를 상속받고 있습니다. Object클래스는 자바의 최상위 클래스입니다.





#상속형태
-자식클래스의 이름 뒤에 extends라는 키워드를 쓰고 물려받을 클래스의 이름을 씀
	-다른클래스로부터 멤버변수와 메서드를 물려받는 클래스를 자식클래스라함

public class Student extends person {

};

#클래스를만들면서 상속만드는법
-클래스 마들때 superclass에 상속받을 클래스이름을 적으면됨


#object : 상속을 따로 지정하지 않으면 모두 object로 상속받게된다.
	-증거: 클래스만들려고키면 java.lang.Object라고 뜬다.
######################################################################################################












######################################################################################################
예제16)패키지생성 및 내부 클래스 불러오기

패키지생성
1)class에서 패키지만들기
-hello라는 package를 class에서 만들어라
	-hello하위에 bye패키지와 hi패키지를 만들고 각 패키지 내부에 패키지와 같은 이름의 class를 만들어라
		-각 패키지들은 모두 마우스로 만들어라.
2)공백 패키지만들기
-nulll(공백이란의미) 패키지를 만들어라.(클래스가 하나도 없는상태)
3)공백패키지만들고 내부에도 공백패키지만들기
	-flat, hierarchical두개로 보기좋게 해봐라


패키지이용(임폴트)
1)fruit이란 패키지를만들고 내부에 apple과 banana클래스를 만들어라.(내부설계할필요없음 임폴트만 시험할거니까)
	test란 패키지를 만들고 내부에 test란 파일을 만들어라.
2)import_ex란 패키지를만들고 내부에 ImportExample클래스를 만들어라
3)importexample클래스에서 fruit과 test패키지 내의 클래스들의 객체를 모두 만들어라.
apple과 banana는 동시에 import하고 너머지는 직접 하나하나 import하여 객체를 만들수있게하라



package day0907.fruit;

public class Apple {

}

package day0907.fruit;

public class Banana {

}

package day0907.hello.bye;

public class Bye {

}

package day0907.hello.hi;

public class Hi {

}

package day0907;

import day0907.fruit.*;
//import day0907.fruit;
import day0907.hello.hi.Hi;
import day0907.hello.bye.Bye;

public class MainClass {
	Apple ap = new Apple();
	Banana bn = new Banana();
	Bye b = new Bye();
	Hi hi = new Hi();
}

######################################################################################################




답:




3)공백패키지만들고 내부에도 공백패키지만들기
우클릭해서 패키지 만들고 그다음놈부터는 .을 붙이고 이름을붙이면된다.
ex) gg라고 만들었다면 gg.1, gg.2 등등 
가장위의오른쪽에 아래로화살표가있는데 거기서 패키지 프레젠테이션에 flat과 hierarchical이 있는데 flast을하면 .gg 형태로 보이고
hierarchical을하면 디렉터리형태로 보여서 보기편하다.


3)importexample클래스에서 fruit과 test패키지 내의 클래스들의 객체를 모두 만들어라.
apple과 banana는 동시에 import하고 너머지는 직접 하나하나 import하여 객체를 만들수있게하라
import fruit.*;
import test.test;	//제일마지막은 항상 클래스이름(패키지를불러오는이유가 클래스를쓰기위함인데 클래스를 명시를안하면안됨)
			//단, 패키지 내의 모든클래스일시 클래스이름대신 *


















######################################################################################################
예제17)상속

inherit패키지내부에 phone 패키지를 만드는데 두개를 동시에 만들어라.
그리고 phone패키지 내부에 DmbPhone, MainClass, Phone 3개의 클래스를 만들어라
그후 아래 폼을 이용해서 출력결과가 실행되게하라(Phone과 DmbPhone 클래스를 설계하라!)

Phone클래스 멤버변수: String model, String color
Phone클래스 메서드(멤버함수): powerOn, powerOff, ring(벨울리는기능_전화오는기능), hangUp(전화끊는기능)

package inherit.phone;

public class MainClass {
	public MainClass() {
		//Dmb폰 객체 생성
		DmbPhone dp = new DmbPhone("햅틱", "메탈그레이", 10);
		
		//dmb폰 객체에서 상속받은 Phone클래스의 멤버변수에 접근
		System.out.println("모델 : "+dp.model);
		System.out.println("색상 : "+dp.color);
		
		//DmpPhone에서 선언한 멤버변수에 접근
		System.out.println("채널 : "+dp.channel);
		
		
		//Dmbphone으로 만들어진 객체를이용하여 Phone에서 상속받은 메서드 호출
		dp.powerOn();
		dp.ring();
		dp.hangUp();
		
		//DmbPhone에서 선언한 메서드 호출
		dp.turnOnDmb();
		dp.changeChannel(7);
		dp.turnOffDmb();
		
		//Dmbphone으로 만들어진 객체를이용하여 Phone에서 상속받은 메서드 호출
		dp.powerOff();
	}
}


<출력결과>
모델: 햅틱
색상: 메탈그레이
채널: 10
전원을 켭니다.
벨이 울립니다.
전화를 끊습니다.
방송 수신을 시작합니다.
채널 7번으로 변경합니다.
방송 수신을 종료합니다.
전원을 끕니다.



package day0907.inherit.phone;

public class Phone {
	String model;
	String color;
	//DmbPhone d;	//이렇게하면 이게지금 heap에 d가 만들어진상태인가? 아니면 아직 d값에 널이들어가있는건가..
					//위에것들도 마찬가지
	
	void powerOn() {
		System.out.println("전원을 켭니다.");
	}
	void powerOff() {
		System.out.println("전원을 끕니다.");		
	}
	void ring() {
		System.out.println("전화벨이 울립니다.");
	}
	void hangUp(){
		System.out.println("전화를 끊습니다.");
	}
}



package day0907.inherit.phone;

public class DmbPhone extends Phone {
	int channel;
	
	DmbPhone(String mo, String co, int ch){
		model = mo;
		color = co;
		channel = ch;
	}
	
	void turnOnDmb() {
		System.out.println("방송 수신을 시작합니다.");
	}
	void turnOffDmb() {
		System.out.println("방송 수신을 종료합니다.");
	}
	void changeChannel(int n) {
		channel = n;
		System.out.printf("채널 %d번으로 변경합니다.\n", channel);
	}
}




package day0907.inherit.phone;

import java.util.Arrays;
import java.util.Scanner;

public class MainClass {
	public static void main(String[] args) {
//		Phone p=new Phone();
//		p.color = "빨강";
		
		//Dmb폰 객체 생성
		DmbPhone dp = new DmbPhone("햅틱", "메탈그레이", 10);
		
		//dmb폰 객체에서 상속받은 Phone클래스의 멤버변수에 접근
		System.out.println("모델 : "+dp.model);
		System.out.println("색상 : "+dp.color);
		
		//DmpPhone에서 선언한 멤버변수에 접근
		System.out.println("채널 : "+dp.channel);
		
		
		//Dmbphone으로 만들어진 객체를이용하여 Phone에서 상속받은 메서드 호출
		dp.powerOn();
		dp.ring();
		dp.hangUp();
		
		//DmbPhone에서 선언한 메서드 호출
		dp.turnOnDmb();
		dp.changeChannel(7);
		dp.turnOffDmb();
		
		//Dmbphone으로 만들어진 객체를이용하여 Phone에서 상속받은 메서드 호출
		dp.powerOff();
		
//		String hi = new String("bye");
//		//String hi;
//		//hi = "방가";
//		System.out.println(hi);
//		Scanner scan;
//		
//		int[] a = {1,2,3};
//		int[] b;
//		b = new int[] {1,2,3};
//		
//		System.out.println(a);
//		System.out.println(Arrays.toString(a));
//		System.out.println(b);
	}
}

######################################################################################################




답:


package inherit.phone;

public class Phone {
	String model;
	String color;
	
	void powerOn() {
		System.out.println("전원을 켭니다.");
	}
	void powerOff() {
		System.out.println("전원을 끕니다.");
	}
	void ring() {
		System.out.println("벨이 울립니다.");
	}
	void hangUp() {
		System.out.println("전화를 끊습니다.");
	}
}




package inherit.phone;

public class DmbPhone extends Phone{
	 int channel;
	
	 DmbPhone(String mod, String col, int ch){
		 model = mod;
		 color = col;
		 channel = ch;
	 }
	
	void turnOnDmb() {
		System.out.println("방송 수신을 시작합니다.");
	}
	void turnOffDmb() {
		System.out.println("방송 수신을 종료합니다.");
	}
	void changeChannel(int n) {
		channel = n;
		System.out.printf("채널  %d번으로 변경합니다.\n", channel);
	}

}
