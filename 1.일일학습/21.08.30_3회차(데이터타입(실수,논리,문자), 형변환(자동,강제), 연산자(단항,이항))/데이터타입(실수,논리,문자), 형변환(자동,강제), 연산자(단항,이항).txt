21.08.30_3회차
======================================================================================================
*데이터타입(실수,논리,문자), 형변환(자동,강제), 연산자(단항,이항)
======================================================================================================







#######################################################################################################
개념정리_기본형 데이터타입(실수형, 논리형, 문자형)



float 유효자릿수 : 7
double 유효자릿수 : 15~16
유효자릿수 -> 소숫점아래자리가아니라 숫자의 수(0.으로 시작한다면 정수부분은 수의 갯수로안침)

#실수형 데이터 타입
-실수형에는 2가지 유형이 있음
-실수형 변수를 선언할때 float, double 키워드를 사용함
-실수형 상수의 표현방법은 디폴트형이(그냥 실수를적었을때 인식하는 상수의 타입)
	 double이므로 float형을 지정하려면 숫자 뒤에 "F"를 부여줌
-float형 또는 double형의 상수의 표현은 소수점 표현방식인 10진수형 표현방식과 
	지수형식으로 나타내는 과학기술용 표기법(지수식표기법)이 사용됨



public class FloatExample {
	public static void main(String[] args) {
		float f1 = 7.12345F;
		double d1 = 7.12345;
		System.out.println(f1);
		System.out.println(d1);
		
		
		float f2 = 1.234567891234F;
		double d2 = 1.234567891234;
		
		
		System.out.println(f2);
		System.out.println(d2);
		
		double d0 = 1.234567890123456789; //왜 16자리까지나오지
		System.out.println(d0);
		
		
		
		
		float f3 = 3.1415e6F; // 3.1415 x 10^6을 뜻함
								//지수식표현법 (크기를쉽게비교)
								//10을 e로 나타냄
								//3141500
		double d3 = 2e-3; // 2.213 x 10^-3
		
		System.out.println(f3);
		System.out.println(d3);
	}
}




#논리형 데이터타입(boolean)
-논리형 값에는 true와 false가 있음(소문자)
-논리형은 다른 데이터 타입과 서로 형변환(type casting)할 수 없다.
-또한 C언어에서처럼 숫자 값을 논리 값으로 해석하여 0을 false로 다루고 0이 아닌 값을 true로
 핵석하는 것을 허용하지 않음



#문자형 데이터 타입
-단일 문자는 char 형으로 표현
-char형은 0~ 2^16의 범위 내에서 부호가 없는 16비트(2byte) 숫자를 사용하여 유니코드 문자를 표현
-char형 값은 홑 따옴표 ('')안에 넣어야 함
-문자열을 표현할때는 String을 사용
-String은 기본 데이터형이 아님
	-문자열을 좀 더 쉽게 다루기위해 만들어 놓은 클래스일뿐임
-String 클래스는 문자열을 표현하는데 사용됨
-문자열 값은 겹따옴표("")안에 넣음





public class TextualExample {
	public static void main(String[] args) {
		char c1 = 'A';
		char c2 = 66;
		/*
		 * 한글 '가'에 해당하는 유니코드 AC00을 직접 16진수 형태로 저장하려면
		 * 탈출문자 \\u를 적어줘야함
		 */
		char c3 = '\uAC00';	//아스키코드를 탈출하고 유니코드를본다
							//이런느낌인건가?
		
		System.out.printf("%c %c %c\n", c1, c2, c3);
		
		//문자열을 저장할수 있는 데이터타입 String
		String s1 = "my dream";
		String s2 = "is a scientist";
		
		System.out.println("-----------------");
		System.out.println(s1);
		System.out.println(s2);
				
		
	}
}

#String 클래스를 이용한 변수선언

*String s1 = "HELLo"; 			// 변수 선언 및 할당
*String s2 = new String("Hello"); 	//객체 생성
*String s3;				//s3는 디폴트값 null, 길이를 알수없음
*String s4 = "";			//null string, 길이가 0
*String s5 = " ";			//blank string, 길이가 0이 아님(길이 1임 공백도 데이터라는소리)


#문자열과 다른값과 + 연산을 수행하면 무조건 문자열로 반환
100+200		//300
100+"200"	//100200
10+20+"Hello"	//30Hello
"Hello"+10+20	//Hello1020
"Hello"+(10+20)	//Hello30

#문자형은 0~65535 값을 가짐
'A' + 10 	//75
	-'A'는 char형, 10진수 65(0x41)값을 가짐
	-int형 크기 이하의 연산의 결과는 무조건 int형이 된다(문자열제외)





#######################################################################################################






















#######################################################################################################
개념정리_자동형변환, 강제형변환, 자동형변환의 예외적경우(int->char)

#형변환
-형변환에서의 데이터타입의 크기(단순 바이트를 말하는것이아닌 표현범위이다)
	byte(1) < short(2) < int(4) < long(8) < float(4) < double(8)
		  char(2)			-표현범위가 정수보다 훨씬많기때문에 long보다 큰것이다.
						-부동소수로저장되니까..! 정수는 하나하나 모든 값을 저장하는거고
							실수부터는 그값을 지수표현식으로 하니 훨씬 많은 범위가가능
	???????? : 궁금한점->그럼 형변환 아니라 일반적 생활에서 누가 float 데이터와 long데이터인 변수 두개를 말하며 둘중에
			데이터 타입의 크기가 큰놈으로줘! 라고하면 실질적인 byte크기가 큰녀석을줘야할지 형변환할때 표현범위로
			산정하는 데이터 타입의 크기로 줘야할지 딜레마에 빠진다.
		즉 형변환에서의 데이터타입의 크기가 java 언어 전체 범위에서 데이터타입의 크기로 인정되는지 궁금

#자동형변환(암시적,묵시적형변환) : 크기가 작은 데이터타입의 데이터를 큰 데이터타입으로 변환할때는 
			자바 가상머신(jvm)이 데이터 타입을 자동으로 올려서 변환해줌(promotion/upcasting)
	-자동 형 변환의 원칙은 표현범위가 좁은 데이터 타입에서 넓은 데이터 타입으로의 변환만 허용된다는 것이다.
	-대입연산자를 이용해 이루어짐

public class _8CastingExample1 {
	public static void main(String[] args) {
		byte b = 10;
		int i = b; //자동 형변환(데이터크기의 문제가 없으니까)
		
		char c = '가';
		int j = c;	//위와 같은 케이스  자동형변환
		System.out.println("가의 유니코드 : " + j);
		
		int k = 500;
		double d = k; //int -> double 자동 형변환
		System.out.println(d);
		
		float kz = 500L; //long이 float에 들어간 것
		System.out.println(kz);
	}
}


#강제 형 변환(명시적 형변환)
	-추측)크기가 큰 데이터타입에서 작은타입으로 가면 공간상에선 문제가 되니까 미리 컴파일러가 차단하는것이고 사람이봤을때
		공간내부를보면 큰공간의 값만은 작은타입으로 들어가기에 문제없다고 판단해서 사람이 변환해주는 것이라고 보면될듯

-크기가 큰 데이터를 작은 데이터타입으로 변환하려면 반드시 캐스트 연산자(type)를 사용하여 명시적으로 형 변환을 해야함(Downcasting)
-강제형변환의 경우 데이터 손실이 일어날 가능성이 있기때문에 명시적으로 타입을 변환합니다.
-주의점 
	-해당 데이터 타입이 받아들일수 있는 범위가 아닌 데이터가 들어오면 오버플로(범위보다 큰경우?), 언더플로(범위보다 작은경우?)가 일어남 



public class _8CastingExample2 {
	public static void main(String[] args) {		
		int i = 45422;	
		//char c = i; //에러, 즉 자동형변환 불가
		char c = (char)i;	//명시적 형변환
							//i가  char가 가지는 표현범위 내에서 있어야 제대로 작동함
							//(0~65535)
		System.out.println("72의 유니코드문자: " + c);
		
		double d = 4.83123;
		int j = (int)d;
		System.out.println(j);
		
		int k = 1000;	//byte의 표현범위인 -128~127을 넘는 수기에 에러
		//int k = 127;
		byte b = (byte)k;
		System.out.println(b);
	}
}


-서로 다른 타입에 대한 데이터의 연산을 진행할 경우 두 데이터 중 큰 데이터 타입을 가진 쪽에 맞추어 자동 형 변환된 후 연산을 진행



public class _9CastingOperator {
	public static void main(String[] args) {
		char c = 'B';
		int i = 1;
		
//		char cc = c + i; 
						
//		char cc = 'B' + 4; 
				
//		char cc = 'B' + (byte)i;			
//		int d = c+i;	
		//char cc = (char)(c + i);	
		
//		char cc = (char)(c+i);
		byte z = (byte)i;
//		char cc = z;	//에러
		char cc = 65;	//문자또는 숫자상수는 처음엔 기본자료형 int로 되어있지만 
		//상수값으로 적으면 해당타입을 선언한게아니라서 기본디폴트 int로 되어있긴하지만 대입연산자를만나면
		//문자또는 정수값에 따라서 상수의 자료형이 변경되어 저장되는것같고 선언한 변수들은 이미 선언되었기때문에
		//
	
		cc = (char)(c + i);
		int ii = c+i;
		
		System.out.println(cc);
		System.out.println(ii);
		
		int j = 10;
//		double d = j/4;
//		double d = j/(float)4;
//		double d = j/(double)4;
		double d = j/4.0;	//j가 자동으로 double로 변경되어 계산됨
		//데이터타입의 크기가 다른 값간에 연산시에 작은쪽을 큰쪽타입으로 변경해서 계산함
		System.out.println(d);
		
	}
}



-int형보다 작은 데이터 타입들의 연산을 진행할경우 자동으로 int형으로 형변환이 이루어진 후 연산(byte+short, byte + byte 등)
	-이유 : 데이터타입의 크기가 작은애들 특히 int아래애들은 -128~127 혹은 -3만~3만, 0~65535가 있는데 
		그런 작은 애들은 연산으로인해 값이 초과될가능성이 높음으로 애초부터 int로 변경한후 연산을 진행하여 int값을반환한다.


public class _9CastingOperator {
	public static void main(String[] args) {

		
		byte b1 = 100;
		byte b2 = 10;
//		byte b3 = b1 + b2; //에러 : 바이트더하기 바이트인데 에러가 나오는 경우
		byte b3 = (byte)(b1 + b2);
		
		
		
		System.out.println(b3);
	}
}


##혼자 추론 : 자동형변환의 예외적 경우

public class IDontKnow {

	public static void main(String[] args) {
		char c1 = 'B' - 1;		//int->char 자동형변환됨
		System.out.println(c1);
		
		char c2 = 'B';
		char c3 = 1;
		
		System.out.println(c2-c3);
		
		char c4 = (char)(c2 - c3); //int->char 자동형변환 안되서 강제현변환해줌
		//c1에서 int 65가 반환된 후 대입연산자를 만날꺼고
		//c4에서도 int 65가 반환된 후 대입연산자를 만날꺼임
		//c1에서 대입연산자 rvalue가 되는 값은 상수형 int일거임
		//c4에서도 대입연산자 rvalue가 되는 값은 상수형 int일거임
		//같은 상수형 int가 char형 c1, c4에 들어가는데 c1에서는 자동형변환되고 c4에서는 안되는
		//이유가 무엇일까? 
		//원래 int에서 char로 자동형변환은 안되니까 상수가 예외인 경우로 파악해야할까?
		//상수만 int에서 char로 자동형변환이 가능하다라고 정의를 내린다면
		//그 내부를 봤을때 이유는 상수는 아스키코드값이 명확히 정해진 
		
		int i1 = 5;
		char c5 = c3;
		char c7 = 5;	//정수형 상수는 언제든지 문자가될수있다.
							//자동형변환의 예외적인경우로 아스키코드로인한 자동형변환으로
							//이해해야할듯
//		char c6 = i1;	//정수형 변수는  문자가 될수 없다.(강제형변환)
			//그런데 이형식이 계산방식에도 작용하나봄
		//아스키코드로인한 자동형변환이가능한 정수형 상수간의 연산을통해 반환된 정수형 상수와
		//변수간(변수&변수,변수&정수형상수)의 연산을통해 반환된 정수형 상수가 있다고 했을때
		//같은 정수형 상수이지만 그 내부에서도 분류가 나뉘나봄
		//그래서 순수귀족혈통인 정수형상수로 반환된 정수형상수는 아스키코드로 인한 자동형변환이 가능하고
		//혼혈은 서자라서 안되나봄
		System.out.println(c4);
		
		
//		c4 = c2 - c3;
	
		//***********************최종추론***********************

		//즉 자동형변환의 예외경우는 데이터타입이 큰놈을 작은놈으로 바꿔서 넣는게 가능한 경우를 뜻하고
		//예외경우 발생방법
		//대입연산자 rvalue가 정수형 상수여야한다.(변수면 안된다)
		//예외: rvalue가 연산으로인해 반환되어진 정수형상수인경우  피연산자 두항
		//모두 정수형 상수가아닌 두항중 하나라도 정수형 변수인경우 rvalue가 정수형 상수로 반환되어도
		//자동형반환의 예외경우는 일어나지 않는다.
		
		
		System.out.println(c4);
		
	}
}


#######################################################################################################















#######################################################################################################
개념정리_단항연산자 및 이항연산자
#연산자(operator)
-연산자는 변수의 값을 변경하거나 대입하는데 사용
-자바에서는 연산자에 따라 연산 대상이 될 수 있는 데이터 타입이 정해져 있음
-오버플로(overflow) 또는 언더플로(underflow)등 범위를 벗어나는 연산들에 대해서는 연산결과에
 불필요한 값이 저장
-0으로 나눌 경우는 오류가 발생



public class TextualExample {
	public static void main(String[] args) {
	
		
		//문자열을 저장할수 있는 데이터타입 String
		String s1 = "my dream";
		String s2 = "is a scientist";
		
		System.out.println("-----------------");
		System.out.println(s1);
		System.out.println(s2);
		//자바에서는 문자열의 + 연산을 진행할수 있음
		//연산결과로 문자열을 이어붙인결과를 도출함
		
		System.out.println(s1 + " " + s2);
		
		
		//문자열과 다른 데이터타입과의 + 연산
		//문자열과 다른데이터타입을할시 다른 타입을 문자열로 바꿔서 출력해줌
		//+보다 우선순위가높은 * 혹은 () / 등의 연산자가 있을시에는
		//해당 부분을 한뒤 문자열로 바꿔서 출력되어짐
		
		System.out.println(100 + 200);
		System.out.println(100 + "200");	
		System.out.println(10 + 20 + "hello");
		System.out.println("hello" + 10 + 20);
		System.out.println("hello" + (10 + 20));
		System.out.println("hello" + 10 * 20);
		System.out.println('A' + "hello");
		
		
		//기본데이터 타입의 연산시 바이트가 큰쪽에 맞추어 연산
		//문자형 데이터타입과 문자형데이타입, 문자형데이터타입과 int형데이터
		//타입의 +연산자 : 문자형은 +연산자가 올시 아스키코드상에 10진수에해당하는
		//숫자로 변경 
		System.out.println('A' + 'B');
		System.out.println('A' + 10);
		System.out.println(100L + "2"); //문자열은 예외인듯
		
		
		
	}
}



#단항연산자(unary operator)
-단항 연산자는 피 연산자가 하나인 연산자를 말함
-단항연산자의 종류
1.변수의 앞이나 뒤에 붙어서 변수 값을 하나 증가시키거나, 감소 시키는 증/감 연산자(++,--)
public class _4UnaryExample {
	public static void main(String[] args)
	{
		//증감연산자 ++, --
		int i = 1;
		int j = i++; //후위연산자
		
		System.out.println("i의 값 : " + i);
		System.out.println("j의 값 : " + j);
		System.out.println("-------------------");
		
		int x = 1;
		int y = ++x; //전위연산자
		
		System.out.println("x의 값: " + x);
		System.out.println("y의 값: " + y);
	}
}

2.양수와 음수를 나타내는 부호연산자(+,-)
3.비트의 값을 바꿔주는 비트 반전연산자(~) 낫연산자
4.논리대수의 값을 반전시켜주는 논리반전연산자(!) 
5.데이터 타입을 바꿔주는 캐스트연산자( (type) )


public class _5BitNotExample {
	public static void main(String[] args) {
		//비트반전 연산자(~)
		/*
		 * 정수의 2진수값의 각자리수를 반전시킴
		 * 0 -> 1, 1 ->0
		 */
		
		byte b = 8;	//0000 1000  1111 0111 -9
		//0000 1001 9
			//-128 ~ 127 
		System.out.println(~b);

		//논리반전 연산자(!)
		//ture -> false, flase -> true
		boolean bool = false;
		System.out.println(!bool);
	}
}


#2항연산자(Binary Operator)
-2항 연산자는 피 연산자(operand)가 두개인 연산자를 의미함
-연산자가 int형(4byte)보다 작은 크기의 데이터 타입인 경우에 boolean형을 제외하고 모두
 int형으로 자동 형변환되어 연산을 수행

#2항연산자의 종류
1.산술연산자(+,-,*,/,%)
-나머지 연산은 결과가 항상 정수

public class _6BinaryOperator {
	public static void main(String[] args) {
		//산술연산(+-*/%)
		int i  = 7 / 3;
		int j = 7 % 3;
		
		System.out.println(i);
		System.out.println(j);
		
		//비교연산
		System.out.println(i==j);
		System.out.println(20 >= 20);
		System.out.println(130 < 50);
	}
}

2.비교 연산자 ( < <= > >= == != )
-비교 연산자의 결과 값은 크기 값을 비교하여 조건을 만족하면 true 그렇지 않으면 false를 반환
-만약 비교되는 숫자의 데이터 타입이 다를 경우 기본적으로 크기가 큰 데이터 타입에 맞추어 비교연산을 실행

3.비트연산자(&, |, ^)
-비트연산자는 두 수를 각각 2진수로 변환하여 두수의 각 비트 연산을 수행
&(비트 곱) : 두 비트가 1일때 1, 나머지는 0 
|(비트 합) : 두비트중 하나라도 1이면 1, 두비트 모두 0이면 0
^ (xor 배타적 논리합) : 두 비트가 다르면 1, 같으면 0


public class _7BitOperating {
	public static void main(String[] args) {
		byte a = 5; // 0000 0101
		byte b = 3; // 0000 0011
					// 0000 0001 1
					// 0000 0111 7
					// 0000 0110 6
		//비트곱(and)
		System.out.println(a & b);
		
		//비트합(or)
		System.out.println(a | b);
		
		//배타적 논리합 연산(xor)
		System.out.println(a ^ b);
	}
}




4.비트 이동 연산자(<<, >>)
-왼쪽 항의 값을 2진수로 변환하여 오른쪽 항의 값만큼 비트를
 왼쪽(<<), 오른쪽(>>)으로 이동시키는 연산을 수행한다.
	-좌측이면 자릿수증가 32비트보다 증가된 비트는 자동삭제
	-우측이면 
ex)int a = 192;
00000000	00000000	00000000	11000000
						00011000

	a << 3(만약 a << 1하면 0001인 상태였다면 2의 배수로 값 변경가능)
00000000	00000000	00000110	00000000 //1536




public class _7BitOperating {
	public static void main(String[] args) {
		byte a = 5; // 0000 0101
		byte b = 3; // 0000 0011
					// 0000 0001 1
					// 0000 0111 7
					// 0000 0110 6
		//비트곱(and)
		System.out.println(a & b);
		
		//비트합(or)
		System.out.println(a | b);
		
		//배타적 논리합 연산(xor)
		System.out.println(a ^ b);
		
		//비트 이동연산자(<<,>>)
		int i = 192;
		System.out.println(i << 3);
		System.out.println(i >> 3);
	}
}


#######################################################################################################















