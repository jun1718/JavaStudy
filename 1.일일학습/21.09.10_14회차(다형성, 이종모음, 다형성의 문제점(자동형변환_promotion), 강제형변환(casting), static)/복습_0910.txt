21.09.10_14회차 
======================================================================================================
*복습
======================================================================================================



######################################################################################################
개념정리_다형성


* 다형성(Polymorphism)

- 다형성이란 "객체가 여러 형태를 가진다"라는 의미로 해석되며, 하나의 객체가 여러가지 유형으로 사용되는 것을 의미합니다.
- 다형성은 상속을 전제조건으로 합니다.
- 다형성을 위해 자바는 자식클래스가 부모클래스의 타입을 가질 수 있도록 허용합니다. 즉, 부모 타입에 모든 자식객체가 대입될 수 있습니다.


* 이종모음(Heterogeneous Collection)

- 이종모음구조는 배열에 다형성을 적용시키는 이유입니다. 배열은 원래 동종모음 구조입니다.
- 예를 들어 int[] iArr = new int[10]; 이런 구조의 배열이 있다면 iArr배열에는 int형 정수 데이터만 저장할 수 있습니다.
- 하지만 다형성을 이용하면 이종모음 구조의 객체 배열이 생성 가능합니다.
- 아래처럼 학생,선생,회사원을 한번에 출력하고자할때 각 객체를 동종모음구조인 배열로 만들면 배열이 3개필요하다.
	그러면 포문도 3개인데 이때 다형성을 이용한 이종모음구조로 배열을 만들면 배열1개에 for문도1개라서 매우 편리해진다.

package poly.person;

public class MainClass {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

//		Student hont = new Student("홍길동", 15, "32");
//		Student lee = new Student("이순신", 17, "21");
//		Student park = new Student("박찬호", 13, "61");
//		
//		Teacher kim = new Teacher("김철수", 26, "영어");
//		Teacher song = new Teacher("송영희", 29, "수학");
//		
//		Employee lim = new Employee("임꺽정", 45, "행정");
//		
//		
//		System.out.println(hont.info());
//		System.out.println(lee.info());
//		System.out.println(park.info());
//		System.out.println(kim.info());
//		System.out.println(song.info());
//		System.out.println(lim.info());
		
		
//		Student[] students = {hont, lee, park};
//		Teacher[] teachers = {kim, song};
//		Employee[] employees = {lim};
//		
//		System.out.println("==========================");
//		for(int i=0;i<students.length;i++) {
//			System.out.println(students[i].info());
//					
//		}
//		
//		System.out.println(hont);
//		System.out.println(students[0]);
//		System.out.println(hont==students[0]);

		
		Person hont = new Student("홍길동", 15, "32");
		Person lee = new Student("이순신", 17, "21");
		Person park = new Student("박찬호", 13, "61");
		
		Person kim = new Teacher("김철수", 26, "영어");
		Person song = new Teacher("송영희", 29, "수학");
		
		Person lim = new Employee("임꺽정", 45, "행정");
		
		
		System.out.println(hont.info());
		System.out.println(lee.info());
		System.out.println(park.info());
		System.out.println(kim.info());
		System.out.println(song.info());
		System.out.println(lim.info());

		System.out.println("==============================");
		Person[] people = {hont, lee, park, kim, song, lim};
		
		for(int i=0;i<people.length;i++) {
			System.out.println(people[i].info());
					
		}
	}

}

######################################################################################################



















######################################################################################################
개념정리_다형성의 문제점

package poly.promotion;

public class Parent {
	public void method1() {
		System.out.println("부모의 1번 메서드 호출!");
	}
	public void method2() {
		System.out.println("부모의 2번 메서드 호출!");
	}
}


package poly.promotion;

public class Child extends Parent{

	public void method2() {
		System.out.println("재정의된 2번 메서드 호출!");
	}
	
	public void method3() {
		System.out.println("자식의 3번 메소드 호출!");
	}
	
}



package poly.promotion;

public class MainClass {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		Parent p1 = new Parent();
		p1.method1();
		p1.method2();
		
		System.out.println("----------------");
		
		Child c1 = new Child();
		c1.method1();
		c1.method2();
		c1.method3();
		
		Parent p2 = c1;	//Child->Parent : promotion(자동형변환)
		System.out.println(c1==p2);
		
		p2.method1();
		p2.method2();	//parent가 아니라 Child의 메서드가 나온다.
//		p2.method3();	//본인건데 안써짐 부모한테 물려받은거만 써지는데 이러면 소용이없다.
					//그래서 다음 부분에서 방법이나온다.
	}

}



부모의 1번 메서드 호출!
부모의 2번 메서드 호출!
----------------
부모의 1번 메서드 호출!
재정의된 2번 메서드 호출!
자식의 3번 메소드 호출!
true
부모의 1번 메서드 호출!
재정의된 2번 메서드 호출!


######################################################################################################












######################################################################################################
개념정리_강제형변환


package poly.casting;

public class MainClass {

	public static void main(String[] args) {
		//promotion이 적용되면 자식클래스의 본래멤버를 참조할 수 없음
		Parent p = new Child();
		p.method1();
		p.method2();
//		p.method3();
		System.out.println("-----------------------");
		
		Child c = (Child)p;
		c.method3();
		
		/*
		 * 한번 promotion이 일어난 객체를 대상으로 강제타입변환을 사용할수있음
		 */
//		Child ccc = (Child)new Parent(); //parent를 만들고 child로 바꾼거임 이럼에러
	}

}


#for문돌리기위해 promotion(자동형변환)해서 이종모음구조로도 배열을 만들수 있게하고 그렇게된녀석은 자식의 메서드를 못쓰니까
 자식의메서드를 쓰기위할때는 다시 강제형변환해서 본인의 형태로해서 사용하는 형태이다. 그래서 자동형변환후에 강제형변환을한다.
	



* 강제 타입 변환(Type Casting)

- 강제 타입 변환은 부모 타입을 자식 타입으로 변환하는 것을 말합니다.
- 객체에서 타입 캐스팅을 사용하려면 우선 먼저 Promotion이 일어나야 합니다. 즉, 부모 타입으로 한번 형 변환이 된 자식 객체만 강      제 타입 변환을 사용할 수 있습니다.
- Promotion이 일어나면 자식 클래스가 가지고 있는 재정의되지 않은 메서드를 사용할 수 없다는 단점이 있었습니다. 
	이 단점을 극복  하기 위해 강제 타입 변환을 사용하여 자식 메서드를 호출하는 방법을 사용합니다.




불편함 => 편리함추구 => 다형성필요성제기 => 형변환발전(자식객체는 부모클래스를 자료형으로 둘수있게하는 형변환promotion 및 강제형변환) 
	=> 다형성구현 => 이종모음구조 객체 배열탄생 => 코드수줄음, 배열관리용이, 결과값출력용이 등

형변환방법
-대입연산자
-매개변수
-반환자료형 

######################################################################################################

















######################################################################################################
개념정리_매개변수의 다형성


* 매개 변수의 다형성

- promotion은 멤버 변수의 값을 대입할 때도 발생하지만, 메서드를 호출할 때 사용하는 매개 변수에도 발생할 수 있습니다.
- 보통 메서드를 호출할 때는 메서드 선언부에서 지정한 데이터 타입과 일치하는 매개값을 전달하여 호출하지만, 매개 변수에 다형성을 적용하면 자식 객체를 전달할 수도 있습니다.


#매개변수의 다형성필요이유

package poly.param;

public class Car {
	public void run() {
		System.out.println("차가 달립니다.");
	}
}

package poly.param;

public class Ferrari extends Car{


	public void run() {
		System.out.println("페라리가 달립니다.");
	}
	
}

package poly.param;

public class Sonata extends Car{

	
	public void run() {
		System.out.println("소나타가 달립니다.");
	}

}

package poly.param;

public class Driver {
	public void drive(Ferrari f) {
		f.run();
	}
	public void drive(Sonata f) {
		f.run();
	}
}




package poly.param;

public class MainClass {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Driver kim = new Driver();
		Ferrari f = new Ferrari();
		
		kim.drive(f);
		
		Sonata s = new Sonata();  //이렇게하면 kim.drive(s)가 안되는 문제가있다.
									//드라이버에 매개변수에 오버로딩해야함
								//하지만 차종류 300만대가 넘어가면 오버라이딩도 300만번
								//넘많음 ㅠㅠ 비효율적임 그래서 다형성을 사용한다!
		
		kim.drive(s);
		
	}

}











------------------------------------



package poly.instanceof_;

public class MainClass {

	public static void main(String[] args) {
		printPersonInfo(new Person("닭강정",22));
		printPersonInfo(new Student("김말이", 24, "44"));
		printPersonInfo(new Teacher("볶음밥", 33,"요리"));
		printPersonInfo(new Employee("떡볶이",21, "주방"));

	}
	
	
	public static void printPersonInfo(Person p) {
		if(p instanceof Student) {
			System.out.println("***********학생의 정보***********");
		}
		else if(p instanceof Teacher) {
			System.out.println("***********선생님의 정보***********");
		}
		else if(p instanceof Employee) {
			System.out.println("***********회사원의 정보***********");
		}
		else {
			System.out.println("***********사람의 정보***********");
		}
		
		System.out.println(p.info());
	}
}







* instanceof

- 자바의 키워드 중에서 instanceof 는 객체가 지정한 클래스의 인스턴스인지 아닌지 검사할 때 사용하는 연산자입니다.
- instanceof 연산자의 왼쪽 항의 객체가 오른쪽 항 클래스의 인스턴스 즉, 오른쪽 항의 객체가 생성되었다면 true를 리턴하고, 그렇지 않으면 false를 리턴합니다.
- ex) Person p = new Student();
p instanceof Student -> true




######################################################################################################














######################################################################################################
개념정리_static 공용변수(멤버변수)
#참고: 모든 instance field(일반변수)는 int a 와 같은 방식으로 만들지만 a앞에 모두 this.이 생략되어있는 것이다.

#static 변수 예시

package static_.field;

public class MainClass {
	public static void main(String[] args) {
		Count c1 = new Count();
//		c1.a = 4;
//		c1.b = 5;	에러는 아니지만 경고가뜸 즉 정적멤버변수로 접근할때는 클래스로 접근하는것을 권장
		//Count.b = 6;
		
		
		
		c1.a++;
		c1.b++;
		System.out.println("a : "+c1.a+ "b : "+c1.b);
		
		Count c2 = new Count();
		c2.a++;
		c2.b++;
		System.out.println("a : "+ c1.a++ + "b : "+c1.b);
	}
}

#스태틱 멤버(변수, 메소드) 찾기 응용
Math.random();
->Math는 객체가 아니다 new로 못만드니까 근데 메소드를부르니 random()메소드는 스태틱 메서드인거다.
Math.PI
->클래스.변수형태로 PI는 스태틱 멤버변수다.

######################################################################################################











######################################################################################################
개념정리_static 메소드호출, 메서드사용 이유 예시

#메서드호출
package static_.method;

public class MainClass {

	public static void main(String[] args) {
		/*
		 -static이 붙은 멤버는 개체 생성없이 클래스 이름으로 직접참조가능
		 */
		System.out.println(Count.method2());
		Count.b +=50;
		System.out.println(Count.method2());
		Count.b +=20;
		System.out.println(Count.method2());

	}

}

#메서드사용 이유 예시


package static_.calc;

public class Calculator {
	
	/*
	 -계산기별로 색깔이 다를수 있기때문에 color같은 변수는 데이터를 공유시켜서는 안됨
	 -하지만 pi같은 원주율값은 계산기마다 동일하기때문에 공유해서 사용하는것이 더 바람직함
	 */
	public String color;
	public static double Pi;
	
	/*
	 -일반 멤버변수를 사용하고있는 메서드는 정적메서드로 선언하면 안됨
	 */
	public void setColor(String color) {
		this.color = color;
	}
	public String getColor() {
		return color;
	}
	
	public static double areaCircle(int r) {
		return r* r* Pi;
	}
	
}

######################################################################################################












######################################################################################################
예제19)static 메소드

1)아래의 에러를 고쳐라

package static_.method;

public class Count {
	public int a;
	public static int b;
	
	//일반메서드 선언
	public int method1() {
		a=10;
		return a+b;
	}
	//일반메서드 안에서는 일반멤버변수와 정적멤버변수를 모두 참조할수 있음
	
	//정적메서드선언
	public static int method2() {
		a=10;
		return a+b;
	}
	/*
	 -static method 내부에서는 static이 붙은 변수나 메서드만 참조할 수 있씁니다.
	 -static 블록 내부에서 non-static멤버를 참조하려면 객체생성을 통해 참조해야 함
	 */
}

package static_.method;

public class Method {
	public int a;
	public static int b;
	
	//일반메서드 선언
	public int method1() {
		a=10;
		return a+b;
		
	}
	//일반메서드 안에서는 일반멤버변수와 정적멤버변수를 모두 참조할수 있음
	
	//정적메서드선언
	public static int method2() {
		Method m = new Method();
		
		m.a=10;
		return m.a+b;
	}
	/*
	 -static method 내부에서는 static이 붙은 변수나 메서드만 참조할 수 있씁니다.
	 -static 블록 내부에서 non-static멤버를 참조하려면 객체생성을 통해 참조해야 함
	 */
}


######################################################################################################

답:

package static_.method;

public class Count {
	public int a;
	public static int b;
	
	//일반메서드 선언
	public int method1() {
		a=10;
		return a+b;
	}
	//일반메서드 안에서는 일반멤버변수와 정적멤버변수를 모두 참조할수 있음
	
	//정적메서드선언
	public static int method2() {
		Count c = new Count();
		c.a=10;
		return c.a+b;
	}
	/*
	 -static method 내부에서는 static이 붙은 변수나 메서드만 참조할 수 있씁니다.
	 -static 블록 내부에서 non-static멤버를 참조하려면 객체생성을 통해 참조해야 함
	 */
}
